/**
GMap2 : generated by hxtern
*/
package ;

extern class GMap2 {
	public function new(container: Node, ?opts: Dynamic<Dynamic>) {}

	public function addControl(control: GControl, ?position: GControlPosition): Void {}

	public function addMapType(type: GMapType): Void {}

	public function addOverlay(overlay: GOverlay): Void {}

	public function changeHeading(heading: Float): Void {}

	public function checkResize(): Null<Dynamic> {}

	public function clearOverlays(): Null<Dynamic> {}

	public function closeInfoWindow(): Null<Dynamic> {}

	public function continuousZoomEnabled(): Bool {}

	public function disableContinuousZoom(): Null<Dynamic> {}

	public function disableDoubleClickZoom(): Null<Dynamic> {}

	public function disableDragging(): Null<Dynamic> {}

	public function disableGoogleBar(): Null<Dynamic> {}

	public function disableInfoWindow(): Null<Dynamic> {}

	public function disablePinchToZoom(): Null<Dynamic> {}

	public function disableRotation(): Null<Dynamic> {}

	public function disableScrollWheelZoom(): Null<Dynamic> {}

	public function doubleClickZoomEnabled(): Bool {}

	public function draggingEnabled(): Bool {}

	public function enableContinuousZoom(): Null<Dynamic> {}

	public function enableDoubleClickZoom(): Null<Dynamic> {}

	public function enableDragging(): Null<Dynamic> {}

	public function enableGoogleBar(): Null<Dynamic> {}

	public function enableInfoWindow(): Null<Dynamic> {}

	public function enablePinchToZoom(): Null<Dynamic> {}

	public function enableRotation(?level: Float): Void {}

	public function enableScrollWheelZoom(): Null<Dynamic> {}

	public function fromContainerPixelToLatLng(pixel: GPoint): GLatLng {}

	public function fromDivPixelToLatLng(pixel: GPoint): GLatLng {}

	public function fromLatLngToContainerPixel(latlng: GLatLng): GPoint {}

	public function fromLatLngToDivPixel(latlng: GLatLng): GPoint {}

	public function getBounds(): GLatLngBounds {}

	public function getBoundsZoomLevel(bounds: GLatLngBounds): Float {}

	public function getCenter(): GLatLng {}

	public function getContainer(): Node {}

	public function getCurrentMapType(): GMapType {}

	public function getDefaultUI(): Dynamic {}

	public function getDragObject(): GDraggableObject {}

	public function getEarthInstance(_callback: Dynamic->Void): Void {}

	public function getInfoWindow(): GInfoWindow {}

	public function getMapTypes(): Array<GMapType> {}

	public function getPane(pane: GMapPane): Node {}

	public function getSize(): GSize {}

	public function getZoom(): Float {}

	public function infoWindowEnabled(): Bool {}

	public function isLoaded(): Bool {}

	public function isRotatable(): Bool {}

	public function openInfoWindow(latlng: GLatLng, node: Node, ?opts: Dynamic<Dynamic>): Void {}

	public function openInfoWindowHtml(latlng: GLatLng, html: String, ?opts: Dynamic<Dynamic>): Void {}

	public function openInfoWindowTabs(latlng: GLatLng, tabs: Array<GInfoWindowTab>, ?opts: Dynamic<Dynamic>): Void {}

	public function openInfoWindowTabsHtml(latlng: GLatLng, tabs: Array<GInfoWindowTab>, ?opts: Dynamic<Dynamic>): Void {}

	public function panBy(distance: GSize): Void {}

	public function panDirection(dx: Float, dy: Float): Void {}

	public function panTo(center: GLatLng): Void {}

	public function pinchToZoomEnabled(): Bool {}

	public function removeControl(control: GControl): Void {}

	public function removeMapType(type: GMapType): Void {}

	public function removeOverlay(overlay: GOverlay): Void {}

	public function returnToSavedPosition(): Null<Dynamic> {}

	public function rotationEnabled(): Bool {}

	public function savePosition(): Null<Dynamic> {}

	public function scrollWheelZoomEnabled(): Bool {}

	public function setCenter(center: GLatLng, ?zoom: Float, ?type: GMapType): Void {}

	public function setMapType(type: GMapType): Void {}

	public function setUI(ui: GMapUIOptions): Void {}

	public function setUIToDefault(): Null<Dynamic> {}

	public function setZoom(level: Float): Void {}

	public function showMapBlowup(latlng: GLatLng, ?opts: Dynamic<Dynamic>): Void {}

	public function updateCurrentTab(modifier: GInfoWindowTab->Void, ?onupdate: Void->Void): Void {}

	public function updateInfoWindow(tabs: Array<GInfoWindowTab>, ?onupdate: Void->Void): Void {}

	public function zoomIn(?latlng: GLatLng, ?doCenter: Bool, ?doContinuousZoom: Bool): Void {}

	public function zoomOut(?latlng: GLatLng, ?doContinuousZoom: Bool): Void {}
}
